import matplotlib.pyplot as plt
import numpy as np
import scipy.signal
import tikzplotlib as tpl
plt.rcParams.update({"text.usetex": True,"font.family": "serif","font.serif": ["Computer Modern Roman"]})
plt.rcParams['figure.autolayout'] = True

d = 7.9375*10**-3
D = 15.875*10**-3
M_silicone = 1.34/1000*100**3
m_array = M_silicone*np.pi*(D**2-d**2)/4
M = 996*np.pi*d**2/4
I = np.pi*(D**4-d**4)/64
L = 46*10**-2
g = 9.81
Estar = 5333.901583749264
E = 225171.9440703812

def f(x,b,order):
    ans = 0
    for i in range(order+1):
        ans += b[i]*x**(order-i)
    return ans

file = "16"
case = "1"
z,x = np.loadtxt("C:\\Users\Morgan\Videos\Videos_Pipe_0.25in_46cm\XYZT_tip_"+file+"Hz"+case+".txt")
tip_mean = np.mean(x[-150:])

files = ["9","16","21","25.5"]
i = 0
cases = ["2"]
list_b = []
stop_list = np.array([])
start_list = np.array([])

for file in files:
    for case in cases:

        z,x = np.loadtxt("C:\\Users\Morgan\Videos\Videos_Pipe_0.25in_46cm\XYZT_tip_"+file+"Hz"+case+".txt")
        x_inv = x[::-1]
        startp = np.argmax(x_inv>0.2)
        startm = np.argmax(-x_inv>0.2)

        if startp != 0 and startm != 0:
            start = x.shape[0] - min(startp,startm)
        elif startp == 0:
            start = x.shape[0] - startm
        elif startm == 0:
            start = x.shape[0] - startp

        stop = x.shape[0]
        plt.plot(np.linspace(0,x.shape[0]/150,x.shape[0])[start:stop],x[start:stop],color = (0.3,0.3,0.3))
        # plt.plot([start/150,start/150],[-0.3,0.3])
        # plt.plot([(stop)/150,(stop)/150],[-0.3,0.3])
        # plt.plot([0,x.shape[0]/150],[tip_mean,tip_mean])
        plt.title(file + case)
        plt.xlabel("Time in seconds")
        plt.ylabel("Position of the tip in meters")
        tpl.save(r"C:\Users\Morgan\Desktop\A(t)_"+str(file)+"Hz"+str(case)+".tex")
        plt.show()
        if i > 25:
            tip_mean = np.mean(x[-50:])
        # plt.plot(np.linspace(0,(stop-start)/150,stop-start),abs(x[start:stop]-tip_mean*np.ones(stop-start)),color=(0.3,0.3,0.3))
        start_list = np.append(start_list,start)
        stop_list = np.append(stop_list,stop)
        peaks_p = np.append(np.array([0]),scipy.signal.find_peaks(abs(x[start:stop]-tip_mean*np.ones(stop-start)),height=[0.004,0.2],distance=10)[0][:-1])
        # plt.title("Case="+case+" and file = "+file)
        # plt.plot(peaks_p/150,abs((x[start:stop]-tip_mean*np.ones(stop-start))[peaks_p]),linestyle="dashed")
        # plt.xlabel("Time in seconds")
        # plt.ylabel("Amplitude of the tip of the pipe in meters")
        # plt.ylim([-0.2,0.2])
        # plt.savefig('Amplitude_2D_case='+case+'file='+file+'.pdf', format='pdf')        
        # plt.show()
        
        bp = np.polyfit(peaks_p/150,np.log(abs((x[start:stop]-tip_mean*np.ones(stop-start))[peaks_p])),1)
        # plt.plot(peaks_p/150,f(peaks_p/150,bp,1))
        # plt.show()
        list_b.append(bp[0])
        i += 1

# volumic_flowrate_list = []
# mass_flowrate_list = []
# nd_flowrate = []
# for file in files:
#     U_array = np.loadtxt(r"C:\\Users\Morgan\Videos\Videos_Pipe_0.25in_46cm\U_"+file+"Hz.txt")
#     Uv = np.mean(U_array[:150])
#     U = Uv*4/(60*1000*np.pi*d**2)
#     u = (M/(E*I))**0.5*L*U 
#     volumic_flowrate_list.append(Uv)
#     mass_flowrate_list.append(U)
#     nd_flowrate.append(u)
    
# b_list = [(list_b[2*i]+list_b[2*i+1])/2 for i in range(0,int(len(list_b)/2))]
# plt.plot(mass_flowrate_list,b_list,color=(0.3,0.3,0.3))
# plt.xlabel("Volumic flowrate in m/s")
# plt.ylabel("Logarithmic amplitude decrement")
# # plt.savefig('Amplitude_Decrement.pdf', format='pdf')        
# plt.show()
# np.savetxt("C:\\Users\Morgan\Videos\Videos_Pipe_0.25in_46cm\Experimental_Damping_Evolution.txt",np.array([mass_flowrate_list,b_list]))

# Start_save = np.zeros((len(files)*len(cases),4))
# # for i in range(len(files)):
# #     for j in range(len(cases)):
# for i in range(len(files)*len(cases)):
#     file = files[i//2]
#     case = cases[i%2]
#     Start_save[i,0] = start_list[i]
#     Start_save[i,1] = stop_list[i]
#     Start_save[i,2] = float(file)
#     Start_save[i,3] = float(case)
        
# np.savetxt("C:\\Users\Morgan\Videos\Videos_Pipe_0.25in_41cm\StartStop_2D.txt",Start_save)
